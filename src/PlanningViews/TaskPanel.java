/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TaskPanel.java
 *
 * Created on 23 mars 2012, 15:31:00
 */
package PlanningViews;

import Planning.DateUtils;
import Planning.PlanningApp;
import PlanningData.LinkWithDB;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;


/**
 *
 * @author Audrey
 */
public class TaskPanel extends javax.swing.JPanel {

    private Date currentDay;
    private ArrayList<String> listTasks;
    private ArrayList<Integer> primaryKeyList;
    
    /** Creates new form TaskPanel */
    public TaskPanel(Date currentDay) {
        initComponents();
        
        this.currentDay = currentDay; 
        dateField.setText(DateUtils.dateToString(currentDay));
        
        //PlanningApp.getApplication().setTaskView(this);
        editButton.setEnabled(false);
        deleteDataButton.setEnabled(false);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListTask = new javax.swing.JList();
        deleteDataButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Planning.PlanningApp.class).getContext().getResourceMap(TaskPanel.class);
        dateField.setBackground(resourceMap.getColor("dateField.background")); // NOI18N
        dateField.setEditable(false);
        dateField.setFont(resourceMap.getFont("dateField.font")); // NOI18N
        dateField.setForeground(resourceMap.getColor("dateField.foreground")); // NOI18N
        dateField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dateField.setText(resourceMap.getString("dateField.text")); // NOI18N
        dateField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dateField.setName("dateField"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jListTask.setBackground(resourceMap.getColor("jListTask.background")); // NOI18N
        jListTask.setFont(resourceMap.getFont("jListTask.font")); // NOI18N
        jListTask.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Datas" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListTask.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTask.setName("jListTask"); // NOI18N
        jListTask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListTaskMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jListTask);

        deleteDataButton.setText(resourceMap.getString("deleteDataButton.text")); // NOI18N
        deleteDataButton.setEnabled(false);
        deleteDataButton.setFocusable(false);
        deleteDataButton.setName("deleteDataButton"); // NOI18N
        deleteDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataButtonActionPerformed(evt);
            }
        });

        addButton.setText(resourceMap.getString("addButton.text")); // NOI18N
        addButton.setMaximumSize(new java.awt.Dimension(63, 23));
        addButton.setMinimumSize(new java.awt.Dimension(63, 23));
        addButton.setName("addButton"); // NOI18N
        addButton.setPreferredSize(new java.awt.Dimension(63, 23));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText(resourceMap.getString("editButton.text")); // NOI18N
        editButton.setMaximumSize(new java.awt.Dimension(63, 23));
        editButton.setMinimumSize(new java.awt.Dimension(63, 23));
        editButton.setName("editButton"); // NOI18N
        editButton.setPreferredSize(new java.awt.Dimension(63, 23));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 415, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                            .addComponent(dateField, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(deleteDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 264, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteDataButton)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        new EditTaskView(PlanningView.getTaskFrame(),currentDay);
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        EditTaskView view = new EditTaskView(PlanningView.getTaskFrame(), currentDay);
        view.setDatasToEdit(primaryKeyList.get(jListTask.getSelectedIndex()));
        editButton.setEnabled(false);
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataButtonActionPerformed
        deleteData(jListTask.getSelectedIndex());
        if(listTasks.isEmpty())
            deleteDataButton.setEnabled(false);
    }//GEN-LAST:event_deleteDataButtonActionPerformed

    private void jListTaskMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTaskMousePressed
        if(jListTask.isSelectionEmpty()) {
            deleteDataButton.setEnabled(false);
            editButton.setEnabled(false);
        }
        else {
            deleteDataButton.setEnabled(true);
            editButton.setEnabled(true);
        }
    }//GEN-LAST:event_jListTaskMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField dateField;
    private javax.swing.JButton deleteDataButton;
    private javax.swing.JButton editButton;
    private javax.swing.JList jListTask;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

        /**
     * Display datas of the current task view / day
     */
    public void displayDatasOfDay() {
        LinkWithDB DB = PlanningApp.getApplication().getLinkWithDB();
       
        try {
            ResultSet dataSet = DB.getDatasOfDay(currentDay);
            
            //Taille ResultSet //
//            int cpt=0;
//            while(dataSet.next())
//                cpt++;
//            dataSet.beforeFirst();
            
            primaryKeyList = new ArrayList<Integer>();
            listTasks = new ArrayList<String>();
            
            while(dataSet.next()) {
                primaryKeyList.add(dataSet.getInt("num_task"));
                String timeB = DateUtils.timeToString(dataSet.getTime("time_beginning"));
                String timeE = DateUtils.timeToString((dataSet.getTime("time_end")));
                String description = dataSet.getString("description");
                
                /* Si la tache a lieu toute la journee alors on ne l'affiche pas,
                 * sinon si l'heure de debut et de fin sont les memes, on ne l'affiche qu'une fois */
                if(timeB.equals(timeE)) {
                    if(timeB.equals("00:00") && timeE.equals("00:00")) // Soit toute la journee
                        listTasks.add(description);
                    else listTasks.add(timeB+" "+description);
                } else listTasks.add(timeB+" - "+timeE+" "+description);
            }
            
            jListTask.setListData(listTasks.toArray());
            
        }
        catch(SQLException e) {
            System.err.println(e.getMessage());
        }
    }
      
    /**
     * Display all datas since today
     */
    public void displayAllDatas() {
        LinkWithDB DB = PlanningApp.getApplication().getLinkWithDB();
       
        try {
            ResultSet dataSet = DB.getAllDatas(currentDay);

            // Taille ResultSet //
            int cpt=0;
            while(dataSet.next())
                cpt++;
            dataSet.beforeFirst();

            listTasks = new ArrayList<String>(cpt);
            while(dataSet.next())
                listTasks.add(dataSet.getDate("date_beginning").toString()+" - "+dataSet.getString("description"));
            
            jListTask.setListData(listTasks.toArray());
        }
        catch(SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    /**
     * Call the method to delete a data from the DB
     * @param index : index in the list of primary keys to delete the good instance
     */
    private void deleteData(int index) {
        LinkWithDB DB = PlanningApp.getApplication().getLinkWithDB();
        int key = primaryKeyList.get(index);
        DB.deleteData(key);
        primaryKeyList.remove(index);
        listTasks.remove(index);
        displayDatasOfDay();
        PlanningApp.getApplication().getView().initDisplay();
    }

}
